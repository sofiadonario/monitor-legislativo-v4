# Load Balancer Docker Compose Configuration
# Monitor Legislativo v4 - Production Load Balancing Setup
# Phase 4 Week 13: Multi-instance service load balancing

version: '3.8'

services:
  # Load Balancer (nginx)
  loadbalancer:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: monitor-legislativo-lb
    ports:
      - "80:80"
      - "443:443"
      - "9090:9090"  # Health check endpoint
    volumes:
      - ./nginx-reverse-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    networks:
      - monitor-network
    restart: unless-stopped
    depends_on:
      - api1
      - api2
      - shiny1
      - redis1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9090/lb-health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Backend API instances (horizontal scaling)
  api1:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: monitor-legislativo-api1
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api1
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis1:6379
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis1
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  api2:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: monitor-legislativo-api2
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api2
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis2:6379
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis2
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Backup API instance
  api3:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: monitor-legislativo-api3
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=api3-backup
      - PORT=8000
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis1:6379
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 60s
      timeout: 15s
      retries: 2
    depends_on:
      - postgres
      - redis1
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # R Shiny instances with session affinity
  shiny1:
    build:
      context: ./r-shiny-app
      dockerfile: Dockerfile
    container_name: monitor-legislativo-shiny1
    environment:
      - SHINY_LOG_LEVEL=INFO
      - INSTANCE_ID=shiny1
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3838"]
      interval: 60s
      timeout: 30s
      retries: 3
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  shiny2:
    build:
      context: ./r-shiny-app
      dockerfile: Dockerfile
    container_name: monitor-legislativo-shiny2
    environment:
      - SHINY_LOG_LEVEL=INFO
      - INSTANCE_ID=shiny2
      - DATABASE_URL=${DATABASE_URL}
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3838"]
      interval: 60s
      timeout: 30s
      retries: 3
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # WebSocket instances for real-time features
  ws1:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: monitor-legislativo-ws1
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=ws1
      - PORT=8001
      - REDIS_URL=redis://redis1:6379
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis1
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  ws2:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    container_name: monitor-legislativo-ws2
    environment:
      - NODE_ENV=production
      - INSTANCE_ID=ws2
      - PORT=8001
      - REDIS_URL=redis://redis2:6379
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - redis2
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Database cluster (master-slave)
  postgres:
    image: postgres:15-alpine
    container_name: monitor-legislativo-db-master
    environment:
      - POSTGRES_DB=monitor_legislativo
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_REPLICATION_USER=${DB_REPLICATION_USER}
      - POSTGRES_REPLICATION_PASSWORD=${DB_REPLICATION_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Database read replica
  postgres-replica:
    image: postgres:15-alpine
    container_name: monitor-legislativo-db-replica
    environment:
      - POSTGRES_DB=monitor_legislativo
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGUSER=${DB_REPLICATION_USER}
      - POSTGRES_MASTER_SERVICE=postgres
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./database/recovery.conf:/var/lib/postgresql/data/recovery.conf:ro
    networks:
      - monitor-network
    restart: unless-stopped
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis cluster
  redis1:
    image: redis:7-alpine
    container_name: monitor-legislativo-redis1
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis1_data:/data
      - ./redis/redis-master.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - monitor-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  redis2:
    image: redis:7-alpine
    container_name: monitor-legislativo-redis2
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis2_data:/data
      - ./redis/redis-slave.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - monitor-network
    restart: unless-stopped
    depends_on:
      - redis1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.25'

  # Service discovery and health monitoring
  consul:
    image: consul:latest
    container_name: monitor-legislativo-consul
    command: consul agent -dev -ui -client 0.0.0.0 -bind 0.0.0.0
    ports:
      - "8500:8500"
    networks:
      - monitor-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: monitor-legislativo-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-lb.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - monitor-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: monitor-legislativo-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - monitor-network
    restart: unless-stopped
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Load testing service
  loadtest:
    build:
      context: ./development/load-testing
      dockerfile: Dockerfile
    container_name: monitor-legislativo-loadtest
    environment:
      - TARGET_URL=http://loadbalancer
      - CONCURRENT_USERS=50
      - TEST_DURATION=300
    networks:
      - monitor-network
    depends_on:
      - loadbalancer
    profiles:
      - testing
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

networks:
  monitor-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis1_data:
    driver: local
  redis2_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local

# Secrets management
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  ssl_cert:
    file: ./ssl/monitor-legislativo.crt
  ssl_key:
    file: ./ssl/monitor-legislativo.key