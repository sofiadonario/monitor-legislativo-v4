name: CI/CD Pipeline - Legislative Monitor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality & Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov bandit safety flake8 black isort mypy

    - name: Code formatting check
      run: |
        black --check --diff .
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Security scan with bandit
      run: bandit -r . -x tests/ -f json -o bandit-report.json || true

    - name: Dependency vulnerability check
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Python Tests
  python-tests:
    runs-on: ubuntu-latest
    needs: quality-checks
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_monitor_legislativo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: -Xms512m -Xmx512m
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Wait for services
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:9200/_cluster/health; do sleep 2; done'

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_monitor_legislativo
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_URL: http://localhost:9200
        TESTING: true
      run: |
        pytest tests/unit/ -v --cov=core --cov-report=xml --cov-report=html

    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_monitor_legislativo
        REDIS_URL: redis://localhost:6379/0
        ELASTICSEARCH_URL: http://localhost:9200
        TESTING: true
      run: |
        pytest tests/integration/ -v --cov=core --cov-append --cov-report=xml

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: python
        name: python-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: python-test-results
        path: |
          htmlcov/
          coverage.xml

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./web/frontend

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Lint
      run: npm run lint

    - name: Type check
      run: npm run type-check

    - name: Run unit tests
      run: npm run test:unit -- --coverage --watchAll=false

    - name: Run e2e tests
      run: |
        npm run build
        npm run test:e2e

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./web/frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build Docker Images
  build-images:
    runs-on: ubuntu-latest
    needs: [python-tests, frontend-tests]
    if: github.event_name != 'pull_request'
    
    permissions:
      contents: read
      packages: write

    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build API Image
    - name: Extract API metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    # Build Web Image
    - name: Extract Web metadata
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: ./web/frontend
        file: ./web/frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-images.outputs.api-image }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to EKS Staging
      run: |
        aws eks update-kubeconfig --name monitor-legislativo-staging
        
        # Update image tags in manifests
        sed -i "s|PLACEHOLDER_API_IMAGE|${{ needs.build-images.outputs.api-image }}|g" k8s/staging/*.yaml
        sed -i "s|PLACEHOLDER_WEB_IMAGE|${{ needs.build-images.outputs.web-image }}|g" k8s/staging/*.yaml
        
        # Apply manifests
        kubectl apply -f k8s/staging/
        
        # Wait for rollout
        kubectl rollout status deployment/api-service -n monitor-legislativo-staging
        kubectl rollout status deployment/web-service -n monitor-legislativo-staging

    - name: Run smoke tests
      run: |
        # Wait for services to be ready
        kubectl wait --for=condition=ready pod -l app=api-service -n monitor-legislativo-staging --timeout=300s
        
        # Get service URL
        API_URL=$(kubectl get service api-service -n monitor-legislativo-staging -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Run smoke tests
        curl -f http://$API_URL/health || exit 1
        python scripts/smoke_tests.py --url http://$API_URL

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan]
    if: github.event_name == 'release'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Deploy to EKS Production
      run: |
        aws eks update-kubeconfig --name monitor-legislativo-production
        
        # Update image tags
        sed -i "s|PLACEHOLDER_API_IMAGE|${{ needs.build-images.outputs.api-image }}|g" k8s/production/*.yaml
        sed -i "s|PLACEHOLDER_WEB_IMAGE|${{ needs.build-images.outputs.web-image }}|g" k8s/production/*.yaml
        
        # Apply manifests with rolling update
        kubectl apply -f k8s/production/
        
        # Wait for rollout
        kubectl rollout status deployment/api-service -n monitor-legislativo-production
        kubectl rollout status deployment/web-service -n monitor-legislativo-production

    - name: Run production health checks
      run: |
        API_URL=$(kubectl get service api-service -n monitor-legislativo-production -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Comprehensive health checks
        python scripts/production_health_check.py --url http://$API_URL
        
        # Performance tests
        python scripts/performance_tests.py --url http://$API_URL

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Legislative Monitor production deployment completed successfully! 🚀'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-tests:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install performance testing tools
      run: |
        pip install locust requests

    - name: Run load tests
      run: |
        # Get staging URL
        STAGING_URL="https://staging.monitor-legislativo.com"
        
        # Run load tests
        locust -f tests/performance/locustfile.py --host=$STAGING_URL --headless -u 50 -r 10 -t 5m --html performance-report.html

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: performance-report.html