name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.19.0'
  PYTHON_VERSION: '3.11'

jobs:
  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog Secret Scanner
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Python linting and testing
  python-quality:
    name: Python Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Lint with flake8
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run Python tests
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pytest --cov=core --cov=web --cov=desktop --cov-report=xml --cov-report=term-missing --cov-fail-under=85
        env:
          PYTHONPATH: .

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # TypeScript/React linting and testing
  frontend-quality:
    name: Frontend Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint TypeScript/React
        run: npm run lint

      - name: Run TypeScript type checking
        run: npx tsc --noEmit

      - name: Run Jest tests
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: frontend
          fail_ci_if_error: true

  # Build verification
  build-verification:
    name: Build All Services
    runs-on: ubuntu-latest
    needs: [security, python-quality, frontend-quality]
    strategy:
      matrix:
        service: [web, desktop]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          npm ci

      - name: Build React application
        run: npm run build

      - name: Build Docker image for ${{ matrix.service }}
        run: |
          if [ -f ${{ matrix.service }}/Dockerfile ]; then
            docker build -t monitor-legislativo-${{ matrix.service }}:test ${{ matrix.service }}/
          else
            echo "Dockerfile not found for ${{ matrix.service }}, skipping Docker build"
          fi

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-verification]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest-integration

      - name: Run integration tests
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pytest tests/integration/ -v --tb=short
        env:
          REDIS_URL: redis://localhost:6379
          TEST_MODE: true

  # Academic compliance validation
  academic-compliance:
    name: Academic Standards Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          if [ -f deps.txt ]; then pip install -r deps.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Validate citation formats
        run: |
          python -c "
          from core.utils.enhanced_citation_generator import FRBROOCitationGenerator
          from core.utils.citationFormatter import ABNTCitationFormatter
          print('✅ Citation formatters import successfully')
          "

      - name: Validate LGPD compliance placeholders
        run: |
          if grep -r "LGPD" . --exclude-dir=.git --exclude-dir=node_modules; then
            echo "✅ LGPD compliance mentioned in codebase"
          else
            echo "⚠️ LGPD compliance not found - academic institutions require this"
            exit 1
          fi

      - name: Check for accessibility features
        run: |
          if grep -r "aria-" src/ --include="*.tsx" --include="*.jsx"; then
            echo "✅ Accessibility attributes found"
          else
            echo "⚠️ Limited accessibility implementation detected"
          fi

# New job for branch protection rules
# name: Branch Protection and Deployment Readiness

# on:
#   pull_request:
#     types: [opened, synchronize, reopened]
#     branches:
#       - main
#       - develop

# jobs:
#   branch-protection:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Check branch protection rules
#         uses: actions/github-script@v6
#         with:
#           script: |
#             // ... script to check rules
#   deployment-readiness:
#     runs-on: ubuntu-latest
#     needs: branch-protection
#     steps:
#       - name: Check deployment readiness
#         run: echo "Deployment readiness checks passed"