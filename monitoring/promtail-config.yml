# Promtail Configuration for Monitor Legislativo v4
# Phase 4 Week 15: Log collection and shipping to Loki
# Collects logs from all application components with intelligent parsing

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

# Loki client configuration
clients:
  - url: http://loki:3100/loki/api/v1/push
    timeout: 10s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10
    # External labels for all logs
    external_labels:
      cluster: monitor-legislativo-v4
      environment: production
      region: brazil-southeast

# Position tracking
positions:
  filename: /tmp/positions.yaml

# Scrape configurations for different log sources
scrape_configs:
  # =====================================================================
  # Application Logs - Backend API
  # =====================================================================
  - job_name: backend-api
    static_configs:
      - targets:
          - localhost
        labels:
          job: backend-api
          component: api
          service: monitor-legislativo
          __path__: /var/log/monitor-legislativo/api/*.log
    
    # Pipeline for API log processing
    pipeline_stages:
      # Parse timestamp and log level
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}) \[(?P<level>\w+)\] (?P<logger>\S+): (?P<message>.*)'
      
      # Convert timestamp
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05,000'
          location: America/Sao_Paulo
      
      # Extract log level as label
      - labels:
          level:
          logger:
      
      # Parse structured messages (JSON)
      - match:
          selector: '{component="api"}'
          stages:
            - json:
                expressions:
                  request_id: request_id
                  user_id: user_id
                  endpoint: endpoint
                  method: method
                  status_code: status_code
                  response_time: response_time
                  search_query: search_query
            - labels:
                request_id:
                endpoint:
                method:
                status_code:
      
      # Parse search-specific logs
      - match:
          selector: '{endpoint=~"/api/v1/search.*"}'
          stages:
            - regex:
                expression: 'search_query=(?P<search_terms>[^\\s]+)'
            - labels:
                search_terms:
      
      # Parse error logs with stack traces
      - match:
          selector: '{level="ERROR"}'
          stages:
            - multiline:
                firstline: '^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}'
                max_wait_time: 3s
            - regex:
                expression: '(?P<error_type>\w+Error): (?P<error_message>.*?)(?:\n(?P<stack_trace>.*))?'
            - labels:
                error_type:

  # =====================================================================
  # Frontend Logs - nginx
  # =====================================================================
  - job_name: frontend-nginx
    static_configs:
      - targets:
          - localhost
        labels:
          job: frontend
          component: nginx
          service: monitor-legislativo
          __path__: /var/log/nginx/*.log
    
    pipeline_stages:
      # Parse nginx access logs
      - match:
          selector: '{component="nginx"} |~ "access"'
          stages:
            - regex:
                expression: '(?P<remote_addr>\S+) - (?P<remote_user>\S+) \[(?P<time_local>[^\]]+)\] "(?P<method>\S+) (?P<request_uri>\S+) (?P<protocol>[^"]+)" (?P<status>\d+) (?P<body_bytes_sent>\d+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)" "(?P<http_x_forwarded_for>[^"]*)" rt=(?P<request_time>\S+) uct="(?P<upstream_connect_time>[^"]*)" uht="(?P<upstream_header_time>[^"]*)" urt="(?P<upstream_response_time>[^"]*)"'
            
            - timestamp:
                source: time_local
                format: '02/Jan/2006:15:04:05 -0700'
                location: America/Sao_Paulo
            
            - labels:
                method:
                status:
                remote_addr:
            
            # Classify request types
            - match:
                selector: '{request_uri=~"/api/.*"}'
                stages:
                  - labels:
                      request_type: api
            
            - match:
                selector: '{request_uri=~"/static/.*"}'
                stages:
                  - labels:
                      request_type: static
            
            # Flag slow requests
            - match:
                selector: '{component="nginx"}'
                stages:
                  - regex:
                      expression: 'rt=(?P<rt_value>\d+\.\d+)'
                  - template:
                      source: slow_request
                      template: '{{ if gt .rt_value 2.0 }}true{{ else }}false{{ end }}'
                  - labels:
                      slow_request:
      
      # Parse nginx error logs
      - match:
          selector: '{component="nginx"} |~ "error"'
          stages:
            - regex:
                expression: '(?P<timestamp>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<pid>\d+)#(?P<tid>\d+): (?P<message>.*?)(?:, client: (?P<client>\S+))?(?:, server: (?P<server>\S+))?(?:, request: "(?P<request>[^"]*)")?(?:, host: "(?P<host>[^"]*)")?'
            
            - timestamp:
                source: timestamp
                format: '2006/01/02 15:04:05'
                location: America/Sao_Paulo
            
            - labels:
                level:
                client:
                server:

  # =====================================================================
  # Database Logs - PostgreSQL
  # =====================================================================
  - job_name: database-postgresql
    static_configs:
      - targets:
          - localhost
        labels:
          job: database
          component: postgresql
          service: monitor-legislativo
          __path__: /var/log/postgresql/*.log
    
    pipeline_stages:
      # Parse PostgreSQL logs
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}.\d{3}) (?P<timezone>\w+) \[(?P<pid>\d+)\] (?P<level>\w+): (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000'
          location: America/Sao_Paulo
      
      - labels:
          level:
          pid:
      
      # Parse slow query logs
      - match:
          selector: '{component="postgresql"}'
          stages:
            - regex:
                expression: 'duration: (?P<duration>\d+\.\d+) ms.*statement: (?P<query>.*)'
            - labels:
                slow_query: '{{ if gt .duration 1000.0 }}true{{ else }}false{{ end }}'
      
      # Parse connection logs
      - match:
          selector: '{component="postgresql"} |~ "(connection|authentication)"'
          stages:
            - regex:
                expression: 'connection (?P<connection_action>\w+) for user "(?P<db_user>[^"]+)" database "(?P<database>[^"]+)" host "(?P<host>[^"]+)"'
            - labels:
                connection_action:
                db_user:
                database:

  # =====================================================================
  # Cache Logs - Redis
  # =====================================================================
  - job_name: cache-redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: cache
          component: redis
          service: monitor-legislativo
          __path__: /var/log/redis/*.log
    
    pipeline_stages:
      - regex:
          expression: '(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d{2} \w{3} \d{4} \d{2}:\d{2}:\d{2}.\d{3}) (?P<level>\W) (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: '02 Jan 2006 15:04:05.000'
          location: America/Sao_Paulo
      
      - labels:
          level:
          role:
          pid:

  # =====================================================================
  # R Shiny Analytics Logs
  # =====================================================================
  - job_name: analytics-shiny
    static_configs:
      - targets:
          - localhost
        labels:
          job: analytics
          component: shiny
          service: monitor-legislativo
          __path__: /var/log/shiny-server/*.log
    
    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}) \[(?P<level>\w+)\] (?P<pid>\d+) - (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: RFC3339
          location: America/Sao_Paulo
      
      - labels:
          level:
          pid:

  # =====================================================================
  # Container Logs (Docker)
  # =====================================================================
  - job_name: container-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
        filters:
          - name: label
            values: ["com.docker.compose.project=monitor-legislativo"]
    
    relabel_configs:
      # Set container name as job label
      - source_labels: [__meta_docker_container_name]
        regex: /(.*)
        target_label: container_name
        replacement: ${1}
      
      # Set service name from compose
      - source_labels: [__meta_docker_container_label_com_docker_compose_service]
        target_label: compose_service
      
      # Set component based on service
      - source_labels: [compose_service]
        regex: '(api\d+|backend.*)'
        target_label: component
        replacement: api
      
      - source_labels: [compose_service]
        regex: '(frontend|nginx|loadbalancer)'
        target_label: component
        replacement: frontend
      
      - source_labels: [compose_service]
        regex: '(postgres.*|db.*)'
        target_label: component
        replacement: database
      
      - source_labels: [compose_service]
        regex: '(redis.*|cache.*)'
        target_label: component
        replacement: cache
      
      - source_labels: [compose_service]
        regex: '(shiny.*|analytics.*)'
        target_label: component
        replacement: analytics
    
    pipeline_stages:
      # Parse container JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            time: time
      
      - timestamp:
          source: time
          format: RFC3339Nano
      
      - output:
          source: output
      
      # Parse application logs within containers
      - match:
          selector: '{component="api"}'
          stages:
            - json:
                expressions:
                  level: level
                  message: message
                  request_id: request_id
                  endpoint: endpoint
            - labels:
                level:
                endpoint:

  # =====================================================================
  # System Logs
  # =====================================================================
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          component: system
          service: monitor-legislativo
          __path__: /var/log/syslog
    
    pipeline_stages:
      - regex:
          expression: '(?P<timestamp>\w{3} \s?\d{1,2} \d{2}:\d{2}:\d{2}) (?P<hostname>\S+) (?P<app_name>\S+)(?:\[(?P<procid>\d+)\])?: (?P<message>.*)'
      
      - timestamp:
          source: timestamp
          format: 'Jan _2 15:04:05'
          location: America/Sao_Paulo
      
      - labels:
          hostname:
          app_name:
          procid:

  # =====================================================================
  # Application Metrics Logs (Custom)
  # =====================================================================
  - job_name: metrics
    static_configs:
      - targets:
          - localhost
        labels:
          job: metrics
          component: metrics
          service: monitor-legislativo
          __path__: /var/log/monitor-legislativo/metrics/*.log
    
    pipeline_stages:
      # Parse structured metric logs
      - json:
          expressions:
            timestamp: timestamp
            metric_name: metric_name
            metric_value: metric_value
            labels: labels
            level: level
      
      - timestamp:
          source: timestamp
          format: RFC3339
      
      - labels:
          metric_name:
          level:
      
      # Extract specific metrics
      - match:
          selector: '{metric_name="search_performance"}'
          stages:
            - json:
                expressions:
                  search_term: labels.search_term
                  response_time: metric_value
                  result_count: labels.result_count
            - labels:
                search_term:
                result_count:

# Target configuration for service discovery
target_config:
  sync_period: 10s